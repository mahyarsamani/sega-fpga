// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rtl_kernel_wizard_0_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        axisHBMin_TVALID,
        axisHBMout_TREADY,
        axisHBMin_TDATA,
        axisHBMin_TREADY,
        axisHBMin_TKEEP,
        axisHBMin_TSTRB,
        axisHBMin_TLAST,
        axisHBMout_TDATA,
        axisHBMout_TVALID,
        axisHBMout_TKEEP,
        axisHBMout_TSTRB,
        axisHBMout_TLAST
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   axisHBMin_TVALID;
input   axisHBMout_TREADY;
input  [255:0] axisHBMin_TDATA;
output   axisHBMin_TREADY;
input  [31:0] axisHBMin_TKEEP;
input  [31:0] axisHBMin_TSTRB;
input  [0:0] axisHBMin_TLAST;
output  [255:0] axisHBMout_TDATA;
output   axisHBMout_TVALID;
output  [31:0] axisHBMout_TKEEP;
output  [31:0] axisHBMout_TSTRB;
output  [0:0] axisHBMout_TLAST;

reg ap_idle;
reg axisHBMin_TREADY;
reg axisHBMout_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_last_V_fu_114_p1;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    axisHBMin_TDATA_blk_n;
reg    axisHBMout_TDATA_blk_n;
wire   [31:0] trunc_ln674_fu_119_p1;
wire   [31:0] p_Result_s_fu_129_p4;
wire   [31:0] p_Result_2_fu_145_p4;
wire   [31:0] p_Result_3_fu_161_p4;
wire   [31:0] p_Result_1_fu_177_p4;
wire   [31:0] p_Result_4_fu_193_p4;
wire   [31:0] p_Result_6_fu_209_p4;
wire   [31:0] p_Result_7_fu_225_p4;
wire   [31:0] add_ln232_7_fu_235_p2;
wire   [31:0] add_ln232_6_fu_219_p2;
wire   [31:0] add_ln232_5_fu_203_p2;
wire   [31:0] add_ln232_4_fu_187_p2;
wire   [31:0] add_ln232_3_fu_171_p2;
wire   [31:0] add_ln232_2_fu_155_p2;
wire   [31:0] add_ln232_1_fu_139_p2;
wire   [31:0] add_ln232_fu_123_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_loop_init;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

rtl_kernel_wizard_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((axisHBMout_TREADY == 1'b0) | (axisHBMin_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((axisHBMout_TREADY == 1'b0) | (axisHBMin_TVALID == 1'b0) | (ap_start_int == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((axisHBMout_TREADY == 1'b0) | (axisHBMin_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (tmp_last_V_fu_114_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((axisHBMout_TREADY == 1'b0) | (axisHBMin_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((axisHBMout_TREADY == 1'b0) | (axisHBMin_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        axisHBMin_TDATA_blk_n = axisHBMin_TVALID;
    end else begin
        axisHBMin_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((axisHBMout_TREADY == 1'b0) | (axisHBMin_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        axisHBMin_TREADY = 1'b1;
    end else begin
        axisHBMin_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        axisHBMout_TDATA_blk_n = axisHBMout_TREADY;
    end else begin
        axisHBMout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((axisHBMout_TREADY == 1'b0) | (axisHBMin_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        axisHBMout_TVALID = 1'b1;
    end else begin
        axisHBMout_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln232_1_fu_139_p2 = (p_Result_s_fu_129_p4 + 32'd1);

assign add_ln232_2_fu_155_p2 = (p_Result_2_fu_145_p4 + 32'd1);

assign add_ln232_3_fu_171_p2 = (p_Result_3_fu_161_p4 + 32'd1);

assign add_ln232_4_fu_187_p2 = (p_Result_1_fu_177_p4 + 32'd1);

assign add_ln232_5_fu_203_p2 = (p_Result_4_fu_193_p4 + 32'd1);

assign add_ln232_6_fu_219_p2 = (p_Result_6_fu_209_p4 + 32'd1);

assign add_ln232_7_fu_235_p2 = (p_Result_7_fu_225_p4 + 32'd1);

assign add_ln232_fu_123_p2 = (trunc_ln674_fu_119_p1 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((axisHBMout_TREADY == 1'b0) | (axisHBMin_TVALID == 1'b0) | (ap_start_int == 1'b0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign axisHBMout_TDATA = {{{{{{{{add_ln232_7_fu_235_p2}, {add_ln232_6_fu_219_p2}}, {add_ln232_5_fu_203_p2}}, {add_ln232_4_fu_187_p2}}, {add_ln232_3_fu_171_p2}}, {add_ln232_2_fu_155_p2}}, {add_ln232_1_fu_139_p2}}, {add_ln232_fu_123_p2}};

assign axisHBMout_TKEEP = axisHBMin_TKEEP;

assign axisHBMout_TLAST = axisHBMin_TLAST;

assign axisHBMout_TSTRB = 32'd0;

assign p_Result_1_fu_177_p4 = {{axisHBMin_TDATA[159:128]}};

assign p_Result_2_fu_145_p4 = {{axisHBMin_TDATA[95:64]}};

assign p_Result_3_fu_161_p4 = {{axisHBMin_TDATA[127:96]}};

assign p_Result_4_fu_193_p4 = {{axisHBMin_TDATA[191:160]}};

assign p_Result_6_fu_209_p4 = {{axisHBMin_TDATA[223:192]}};

assign p_Result_7_fu_225_p4 = {{axisHBMin_TDATA[255:224]}};

assign p_Result_s_fu_129_p4 = {{axisHBMin_TDATA[63:32]}};

assign tmp_last_V_fu_114_p1 = axisHBMin_TLAST;

assign trunc_ln674_fu_119_p1 = axisHBMin_TDATA[31:0];

endmodule //rtl_kernel_wizard_0_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1
