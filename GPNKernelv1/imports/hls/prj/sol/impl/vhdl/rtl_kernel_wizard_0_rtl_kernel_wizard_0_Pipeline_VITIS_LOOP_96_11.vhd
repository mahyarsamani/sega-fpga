-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rtl_kernel_wizard_0_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    axisDDRin_TVALID : IN STD_LOGIC;
    axisDDRout_TREADY : IN STD_LOGIC;
    axisDDRin_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    axisDDRin_TREADY : OUT STD_LOGIC;
    axisDDRin_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    axisDDRin_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    axisDDRin_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axisDDRout_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    axisDDRout_TVALID : OUT STD_LOGIC;
    axisDDRout_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    axisDDRout_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    axisDDRout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of rtl_kernel_wizard_0_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_last_V_fu_146_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal axisDDRin_TDATA_blk_n : STD_LOGIC;
    signal axisDDRout_TDATA_blk_n : STD_LOGIC;
    signal trunc_ln674_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_1_fu_161_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_2_fu_177_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_3_fu_193_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_4_fu_209_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_5_fu_225_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_6_fu_241_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_7_fu_257_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_8_fu_273_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_9_fu_289_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_s_fu_305_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_10_fu_321_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_11_fu_337_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_12_fu_353_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_13_fu_369_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_14_fu_385_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_15_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_14_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_13_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_12_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_11_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_10_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_9_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_8_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_7_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_6_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_5_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_4_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_3_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_2_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_1_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln232_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component rtl_kernel_wizard_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component rtl_kernel_wizard_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start_int = ap_const_logic_0) or (axisDDRout_TREADY = ap_const_logic_0) or (axisDDRin_TVALID = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, axisDDRin_TVALID, axisDDRout_TREADY, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln232_10_fu_315_p2 <= std_logic_vector(unsigned(p_Result_4_s_fu_305_p4) + unsigned(ap_const_lv32_1));
    add_ln232_11_fu_331_p2 <= std_logic_vector(unsigned(p_Result_4_10_fu_321_p4) + unsigned(ap_const_lv32_1));
    add_ln232_12_fu_347_p2 <= std_logic_vector(unsigned(p_Result_4_11_fu_337_p4) + unsigned(ap_const_lv32_1));
    add_ln232_13_fu_363_p2 <= std_logic_vector(unsigned(p_Result_4_12_fu_353_p4) + unsigned(ap_const_lv32_1));
    add_ln232_14_fu_379_p2 <= std_logic_vector(unsigned(p_Result_4_13_fu_369_p4) + unsigned(ap_const_lv32_1));
    add_ln232_15_fu_395_p2 <= std_logic_vector(unsigned(p_Result_4_14_fu_385_p4) + unsigned(ap_const_lv32_1));
    add_ln232_1_fu_171_p2 <= std_logic_vector(unsigned(p_Result_4_1_fu_161_p4) + unsigned(ap_const_lv32_1));
    add_ln232_2_fu_187_p2 <= std_logic_vector(unsigned(p_Result_4_2_fu_177_p4) + unsigned(ap_const_lv32_1));
    add_ln232_3_fu_203_p2 <= std_logic_vector(unsigned(p_Result_4_3_fu_193_p4) + unsigned(ap_const_lv32_1));
    add_ln232_4_fu_219_p2 <= std_logic_vector(unsigned(p_Result_4_4_fu_209_p4) + unsigned(ap_const_lv32_1));
    add_ln232_5_fu_235_p2 <= std_logic_vector(unsigned(p_Result_4_5_fu_225_p4) + unsigned(ap_const_lv32_1));
    add_ln232_6_fu_251_p2 <= std_logic_vector(unsigned(p_Result_4_6_fu_241_p4) + unsigned(ap_const_lv32_1));
    add_ln232_7_fu_267_p2 <= std_logic_vector(unsigned(p_Result_4_7_fu_257_p4) + unsigned(ap_const_lv32_1));
    add_ln232_8_fu_283_p2 <= std_logic_vector(unsigned(p_Result_4_8_fu_273_p4) + unsigned(ap_const_lv32_1));
    add_ln232_9_fu_299_p2 <= std_logic_vector(unsigned(p_Result_4_9_fu_289_p4) + unsigned(ap_const_lv32_1));
    add_ln232_fu_155_p2 <= std_logic_vector(unsigned(trunc_ln674_fu_151_p1) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(axisDDRin_TVALID, axisDDRout_TREADY, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) or (axisDDRout_TREADY = ap_const_logic_0) or (axisDDRin_TVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(axisDDRin_TVALID, axisDDRout_TREADY, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or (axisDDRout_TREADY = ap_const_logic_0) or (axisDDRin_TVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, axisDDRin_TVALID, axisDDRout_TREADY, tmp_last_V_fu_146_p1, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (axisDDRout_TREADY = ap_const_logic_0) or (axisDDRin_TVALID = ap_const_logic_0))) and (tmp_last_V_fu_146_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, axisDDRin_TVALID, axisDDRout_TREADY, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (axisDDRout_TREADY = ap_const_logic_0) or (axisDDRin_TVALID = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, axisDDRin_TVALID, axisDDRout_TREADY, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (axisDDRout_TREADY = ap_const_logic_0) or (axisDDRin_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    axisDDRin_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, axisDDRin_TVALID, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            axisDDRin_TDATA_blk_n <= axisDDRin_TVALID;
        else 
            axisDDRin_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    axisDDRin_TREADY_assign_proc : process(ap_CS_fsm_state1, axisDDRin_TVALID, axisDDRout_TREADY, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (axisDDRout_TREADY = ap_const_logic_0) or (axisDDRin_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            axisDDRin_TREADY <= ap_const_logic_1;
        else 
            axisDDRin_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    axisDDRout_TDATA <= (((((((((((((((add_ln232_15_fu_395_p2 & add_ln232_14_fu_379_p2) & add_ln232_13_fu_363_p2) & add_ln232_12_fu_347_p2) & add_ln232_11_fu_331_p2) & add_ln232_10_fu_315_p2) & add_ln232_9_fu_299_p2) & add_ln232_8_fu_283_p2) & add_ln232_7_fu_267_p2) & add_ln232_6_fu_251_p2) & add_ln232_5_fu_235_p2) & add_ln232_4_fu_219_p2) & add_ln232_3_fu_203_p2) & add_ln232_2_fu_187_p2) & add_ln232_1_fu_171_p2) & add_ln232_fu_155_p2);

    axisDDRout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, axisDDRout_TREADY, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            axisDDRout_TDATA_blk_n <= axisDDRout_TREADY;
        else 
            axisDDRout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axisDDRout_TKEEP <= axisDDRin_TKEEP;
    axisDDRout_TLAST <= axisDDRin_TLAST;
    axisDDRout_TSTRB <= ap_const_lv64_0;

    axisDDRout_TVALID_assign_proc : process(ap_CS_fsm_state1, axisDDRin_TVALID, axisDDRout_TREADY, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (axisDDRout_TREADY = ap_const_logic_0) or (axisDDRin_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            axisDDRout_TVALID <= ap_const_logic_1;
        else 
            axisDDRout_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_4_10_fu_321_p4 <= axisDDRin_TDATA(383 downto 352);
    p_Result_4_11_fu_337_p4 <= axisDDRin_TDATA(415 downto 384);
    p_Result_4_12_fu_353_p4 <= axisDDRin_TDATA(447 downto 416);
    p_Result_4_13_fu_369_p4 <= axisDDRin_TDATA(479 downto 448);
    p_Result_4_14_fu_385_p4 <= axisDDRin_TDATA(511 downto 480);
    p_Result_4_1_fu_161_p4 <= axisDDRin_TDATA(63 downto 32);
    p_Result_4_2_fu_177_p4 <= axisDDRin_TDATA(95 downto 64);
    p_Result_4_3_fu_193_p4 <= axisDDRin_TDATA(127 downto 96);
    p_Result_4_4_fu_209_p4 <= axisDDRin_TDATA(159 downto 128);
    p_Result_4_5_fu_225_p4 <= axisDDRin_TDATA(191 downto 160);
    p_Result_4_6_fu_241_p4 <= axisDDRin_TDATA(223 downto 192);
    p_Result_4_7_fu_257_p4 <= axisDDRin_TDATA(255 downto 224);
    p_Result_4_8_fu_273_p4 <= axisDDRin_TDATA(287 downto 256);
    p_Result_4_9_fu_289_p4 <= axisDDRin_TDATA(319 downto 288);
    p_Result_4_s_fu_305_p4 <= axisDDRin_TDATA(351 downto 320);
    tmp_last_V_fu_146_p1 <= axisDDRin_TLAST;
    trunc_ln674_fu_151_p1 <= axisDDRin_TDATA(32 - 1 downto 0);
end behav;
