// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rtl_kernel_wizard_0_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        axisDDRin_TVALID,
        axisDDRout_TREADY,
        axisDDRin_TDATA,
        axisDDRin_TREADY,
        axisDDRin_TKEEP,
        axisDDRin_TSTRB,
        axisDDRin_TLAST,
        axisDDRout_TDATA,
        axisDDRout_TVALID,
        axisDDRout_TKEEP,
        axisDDRout_TSTRB,
        axisDDRout_TLAST
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   axisDDRin_TVALID;
input   axisDDRout_TREADY;
input  [511:0] axisDDRin_TDATA;
output   axisDDRin_TREADY;
input  [63:0] axisDDRin_TKEEP;
input  [63:0] axisDDRin_TSTRB;
input  [0:0] axisDDRin_TLAST;
output  [511:0] axisDDRout_TDATA;
output   axisDDRout_TVALID;
output  [63:0] axisDDRout_TKEEP;
output  [63:0] axisDDRout_TSTRB;
output  [0:0] axisDDRout_TLAST;

reg ap_idle;
reg axisDDRin_TREADY;
reg axisDDRout_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_last_V_fu_146_p1;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    axisDDRin_TDATA_blk_n;
reg    axisDDRout_TDATA_blk_n;
wire   [31:0] trunc_ln674_fu_151_p1;
wire   [31:0] p_Result_4_1_fu_161_p4;
wire   [31:0] p_Result_4_2_fu_177_p4;
wire   [31:0] p_Result_4_3_fu_193_p4;
wire   [31:0] p_Result_4_4_fu_209_p4;
wire   [31:0] p_Result_4_5_fu_225_p4;
wire   [31:0] p_Result_4_6_fu_241_p4;
wire   [31:0] p_Result_4_7_fu_257_p4;
wire   [31:0] p_Result_4_8_fu_273_p4;
wire   [31:0] p_Result_4_9_fu_289_p4;
wire   [31:0] p_Result_4_s_fu_305_p4;
wire   [31:0] p_Result_4_10_fu_321_p4;
wire   [31:0] p_Result_4_11_fu_337_p4;
wire   [31:0] p_Result_4_12_fu_353_p4;
wire   [31:0] p_Result_4_13_fu_369_p4;
wire   [31:0] p_Result_4_14_fu_385_p4;
wire   [31:0] add_ln232_15_fu_395_p2;
wire   [31:0] add_ln232_14_fu_379_p2;
wire   [31:0] add_ln232_13_fu_363_p2;
wire   [31:0] add_ln232_12_fu_347_p2;
wire   [31:0] add_ln232_11_fu_331_p2;
wire   [31:0] add_ln232_10_fu_315_p2;
wire   [31:0] add_ln232_9_fu_299_p2;
wire   [31:0] add_ln232_8_fu_283_p2;
wire   [31:0] add_ln232_7_fu_267_p2;
wire   [31:0] add_ln232_6_fu_251_p2;
wire   [31:0] add_ln232_5_fu_235_p2;
wire   [31:0] add_ln232_4_fu_219_p2;
wire   [31:0] add_ln232_3_fu_203_p2;
wire   [31:0] add_ln232_2_fu_187_p2;
wire   [31:0] add_ln232_1_fu_171_p2;
wire   [31:0] add_ln232_fu_155_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_loop_init;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

rtl_kernel_wizard_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | (axisDDRout_TREADY == 1'b0) | (axisDDRin_TVALID == 1'b0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | (axisDDRout_TREADY == 1'b0) | (axisDDRin_TVALID == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (axisDDRout_TREADY == 1'b0) | (axisDDRin_TVALID == 1'b0)) & (tmp_last_V_fu_146_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (axisDDRout_TREADY == 1'b0) | (axisDDRin_TVALID == 1'b0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (axisDDRout_TREADY == 1'b0) | (axisDDRin_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        axisDDRin_TDATA_blk_n = axisDDRin_TVALID;
    end else begin
        axisDDRin_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (axisDDRout_TREADY == 1'b0) | (axisDDRin_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        axisDDRin_TREADY = 1'b1;
    end else begin
        axisDDRin_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        axisDDRout_TDATA_blk_n = axisDDRout_TREADY;
    end else begin
        axisDDRout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (axisDDRout_TREADY == 1'b0) | (axisDDRin_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        axisDDRout_TVALID = 1'b1;
    end else begin
        axisDDRout_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln232_10_fu_315_p2 = (p_Result_4_s_fu_305_p4 + 32'd1);

assign add_ln232_11_fu_331_p2 = (p_Result_4_10_fu_321_p4 + 32'd1);

assign add_ln232_12_fu_347_p2 = (p_Result_4_11_fu_337_p4 + 32'd1);

assign add_ln232_13_fu_363_p2 = (p_Result_4_12_fu_353_p4 + 32'd1);

assign add_ln232_14_fu_379_p2 = (p_Result_4_13_fu_369_p4 + 32'd1);

assign add_ln232_15_fu_395_p2 = (p_Result_4_14_fu_385_p4 + 32'd1);

assign add_ln232_1_fu_171_p2 = (p_Result_4_1_fu_161_p4 + 32'd1);

assign add_ln232_2_fu_187_p2 = (p_Result_4_2_fu_177_p4 + 32'd1);

assign add_ln232_3_fu_203_p2 = (p_Result_4_3_fu_193_p4 + 32'd1);

assign add_ln232_4_fu_219_p2 = (p_Result_4_4_fu_209_p4 + 32'd1);

assign add_ln232_5_fu_235_p2 = (p_Result_4_5_fu_225_p4 + 32'd1);

assign add_ln232_6_fu_251_p2 = (p_Result_4_6_fu_241_p4 + 32'd1);

assign add_ln232_7_fu_267_p2 = (p_Result_4_7_fu_257_p4 + 32'd1);

assign add_ln232_8_fu_283_p2 = (p_Result_4_8_fu_273_p4 + 32'd1);

assign add_ln232_9_fu_299_p2 = (p_Result_4_9_fu_289_p4 + 32'd1);

assign add_ln232_fu_155_p2 = (trunc_ln674_fu_151_p1 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (axisDDRout_TREADY == 1'b0) | (axisDDRin_TVALID == 1'b0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign axisDDRout_TDATA = {{{{{{{{{{{{{{{{add_ln232_15_fu_395_p2}, {add_ln232_14_fu_379_p2}}, {add_ln232_13_fu_363_p2}}, {add_ln232_12_fu_347_p2}}, {add_ln232_11_fu_331_p2}}, {add_ln232_10_fu_315_p2}}, {add_ln232_9_fu_299_p2}}, {add_ln232_8_fu_283_p2}}, {add_ln232_7_fu_267_p2}}, {add_ln232_6_fu_251_p2}}, {add_ln232_5_fu_235_p2}}, {add_ln232_4_fu_219_p2}}, {add_ln232_3_fu_203_p2}}, {add_ln232_2_fu_187_p2}}, {add_ln232_1_fu_171_p2}}, {add_ln232_fu_155_p2}};

assign axisDDRout_TKEEP = axisDDRin_TKEEP;

assign axisDDRout_TLAST = axisDDRin_TLAST;

assign axisDDRout_TSTRB = 64'd0;

assign p_Result_4_10_fu_321_p4 = {{axisDDRin_TDATA[383:352]}};

assign p_Result_4_11_fu_337_p4 = {{axisDDRin_TDATA[415:384]}};

assign p_Result_4_12_fu_353_p4 = {{axisDDRin_TDATA[447:416]}};

assign p_Result_4_13_fu_369_p4 = {{axisDDRin_TDATA[479:448]}};

assign p_Result_4_14_fu_385_p4 = {{axisDDRin_TDATA[511:480]}};

assign p_Result_4_1_fu_161_p4 = {{axisDDRin_TDATA[63:32]}};

assign p_Result_4_2_fu_177_p4 = {{axisDDRin_TDATA[95:64]}};

assign p_Result_4_3_fu_193_p4 = {{axisDDRin_TDATA[127:96]}};

assign p_Result_4_4_fu_209_p4 = {{axisDDRin_TDATA[159:128]}};

assign p_Result_4_5_fu_225_p4 = {{axisDDRin_TDATA[191:160]}};

assign p_Result_4_6_fu_241_p4 = {{axisDDRin_TDATA[223:192]}};

assign p_Result_4_7_fu_257_p4 = {{axisDDRin_TDATA[255:224]}};

assign p_Result_4_8_fu_273_p4 = {{axisDDRin_TDATA[287:256]}};

assign p_Result_4_9_fu_289_p4 = {{axisDDRin_TDATA[319:288]}};

assign p_Result_4_s_fu_305_p4 = {{axisDDRin_TDATA[351:320]}};

assign tmp_last_V_fu_146_p1 = axisDDRin_TLAST;

assign trunc_ln674_fu_151_p1 = axisDDRin_TDATA[31:0];

endmodule //rtl_kernel_wizard_0_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11
