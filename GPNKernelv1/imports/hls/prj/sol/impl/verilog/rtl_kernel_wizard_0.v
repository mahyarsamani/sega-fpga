// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rtl_kernel_wizard_0_rtl_kernel_wizard_0,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.880000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=160,HLS_SYN_LUT=1293,HLS_VERSION=2022_1}" *)

module rtl_kernel_wizard_0 (
        ap_clk,
        ap_rst_n,
        axisHBMin_TDATA,
        axisHBMin_TVALID,
        axisHBMin_TREADY,
        axisHBMin_TKEEP,
        axisHBMin_TSTRB,
        axisHBMin_TLAST,
        axisDDRin_TDATA,
        axisDDRin_TVALID,
        axisDDRin_TREADY,
        axisDDRin_TKEEP,
        axisDDRin_TSTRB,
        axisDDRin_TLAST,
        axisHBMout_TDATA,
        axisHBMout_TVALID,
        axisHBMout_TREADY,
        axisHBMout_TKEEP,
        axisHBMout_TSTRB,
        axisHBMout_TLAST,
        axisDDRout_TDATA,
        axisDDRout_TVALID,
        axisDDRout_TREADY,
        axisDDRout_TKEEP,
        axisDDRout_TSTRB,
        axisDDRout_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [255:0] axisHBMin_TDATA;
input   axisHBMin_TVALID;
output   axisHBMin_TREADY;
input  [31:0] axisHBMin_TKEEP;
input  [31:0] axisHBMin_TSTRB;
input  [0:0] axisHBMin_TLAST;
input  [511:0] axisDDRin_TDATA;
input   axisDDRin_TVALID;
output   axisDDRin_TREADY;
input  [63:0] axisDDRin_TKEEP;
input  [63:0] axisDDRin_TSTRB;
input  [0:0] axisDDRin_TLAST;
output  [255:0] axisHBMout_TDATA;
output   axisHBMout_TVALID;
input   axisHBMout_TREADY;
output  [31:0] axisHBMout_TKEEP;
output  [31:0] axisHBMout_TSTRB;
output  [0:0] axisHBMout_TLAST;
output  [511:0] axisDDRout_TDATA;
output   axisDDRout_TVALID;
input   axisDDRout_TREADY;
output  [63:0] axisDDRout_TKEEP;
output  [63:0] axisDDRout_TSTRB;
output  [0:0] axisDDRout_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] Message;
wire   [31:0] PEControl;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_start;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_done;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_idle;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_ready;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TREADY;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMin_TREADY;
wire   [255:0] grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TDATA;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TVALID;
wire   [31:0] grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TKEEP;
wire   [31:0] grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TSTRB;
wire   [0:0] grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TLAST;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_start;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_done;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_idle;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_ready;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TREADY;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRin_TREADY;
wire   [511:0] grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TDATA;
wire    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TVALID;
wire   [63:0] grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TKEEP;
wire   [63:0] grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TSTRB;
wire   [0:0] grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TLAST;
reg    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    regslice_both_axisHBMout_V_data_V_U_apdone_blk;
wire    regslice_both_axisDDRout_V_data_V_U_apdone_blk;
reg    ap_block_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    regslice_both_axisHBMin_V_data_V_U_apdone_blk;
wire   [255:0] axisHBMin_TDATA_int_regslice;
wire    axisHBMin_TVALID_int_regslice;
reg    axisHBMin_TREADY_int_regslice;
wire    regslice_both_axisHBMin_V_data_V_U_ack_in;
wire    regslice_both_axisHBMin_V_keep_V_U_apdone_blk;
wire   [31:0] axisHBMin_TKEEP_int_regslice;
wire    regslice_both_axisHBMin_V_keep_V_U_vld_out;
wire    regslice_both_axisHBMin_V_keep_V_U_ack_in;
wire    regslice_both_axisHBMin_V_strb_V_U_apdone_blk;
wire   [31:0] axisHBMin_TSTRB_int_regslice;
wire    regslice_both_axisHBMin_V_strb_V_U_vld_out;
wire    regslice_both_axisHBMin_V_strb_V_U_ack_in;
wire    regslice_both_axisHBMin_V_last_V_U_apdone_blk;
wire   [0:0] axisHBMin_TLAST_int_regslice;
wire    regslice_both_axisHBMin_V_last_V_U_vld_out;
wire    regslice_both_axisHBMin_V_last_V_U_ack_in;
wire    regslice_both_axisDDRin_V_data_V_U_apdone_blk;
wire   [511:0] axisDDRin_TDATA_int_regslice;
wire    axisDDRin_TVALID_int_regslice;
reg    axisDDRin_TREADY_int_regslice;
wire    regslice_both_axisDDRin_V_data_V_U_ack_in;
wire    regslice_both_axisDDRin_V_keep_V_U_apdone_blk;
wire   [63:0] axisDDRin_TKEEP_int_regslice;
wire    regslice_both_axisDDRin_V_keep_V_U_vld_out;
wire    regslice_both_axisDDRin_V_keep_V_U_ack_in;
wire    regslice_both_axisDDRin_V_strb_V_U_apdone_blk;
wire   [63:0] axisDDRin_TSTRB_int_regslice;
wire    regslice_both_axisDDRin_V_strb_V_U_vld_out;
wire    regslice_both_axisDDRin_V_strb_V_U_ack_in;
wire    regslice_both_axisDDRin_V_last_V_U_apdone_blk;
wire   [0:0] axisDDRin_TLAST_int_regslice;
wire    regslice_both_axisDDRin_V_last_V_U_vld_out;
wire    regslice_both_axisDDRin_V_last_V_U_ack_in;
wire    axisHBMout_TVALID_int_regslice;
wire    axisHBMout_TREADY_int_regslice;
wire    regslice_both_axisHBMout_V_data_V_U_vld_out;
wire    regslice_both_axisHBMout_V_keep_V_U_apdone_blk;
wire    regslice_both_axisHBMout_V_keep_V_U_ack_in_dummy;
wire    regslice_both_axisHBMout_V_keep_V_U_vld_out;
wire    regslice_both_axisHBMout_V_strb_V_U_apdone_blk;
wire    regslice_both_axisHBMout_V_strb_V_U_ack_in_dummy;
wire    regslice_both_axisHBMout_V_strb_V_U_vld_out;
wire    regslice_both_axisHBMout_V_last_V_U_apdone_blk;
wire    regslice_both_axisHBMout_V_last_V_U_ack_in_dummy;
wire    regslice_both_axisHBMout_V_last_V_U_vld_out;
wire    axisDDRout_TVALID_int_regslice;
wire    axisDDRout_TREADY_int_regslice;
wire    regslice_both_axisDDRout_V_data_V_U_vld_out;
wire    regslice_both_axisDDRout_V_keep_V_U_apdone_blk;
wire    regslice_both_axisDDRout_V_keep_V_U_ack_in_dummy;
wire    regslice_both_axisDDRout_V_keep_V_U_vld_out;
wire    regslice_both_axisDDRout_V_strb_V_U_apdone_blk;
wire    regslice_both_axisDDRout_V_strb_V_U_ack_in_dummy;
wire    regslice_both_axisDDRout_V_strb_V_U_vld_out;
wire    regslice_both_axisDDRout_V_last_V_U_apdone_blk;
wire    regslice_both_axisDDRout_V_last_V_U_ack_in_dummy;
wire    regslice_both_axisDDRout_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 7'd1;
#0 grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_start_reg = 1'b0;
#0 grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_start_reg = 1'b0;
end

rtl_kernel_wizard_0_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1 grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_start),
    .ap_done(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_done),
    .ap_idle(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_idle),
    .ap_ready(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_ready),
    .axisHBMin_TVALID(axisHBMin_TVALID_int_regslice),
    .axisHBMout_TREADY(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TREADY),
    .axisHBMin_TDATA(axisHBMin_TDATA_int_regslice),
    .axisHBMin_TREADY(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMin_TREADY),
    .axisHBMin_TKEEP(axisHBMin_TKEEP_int_regslice),
    .axisHBMin_TSTRB(axisHBMin_TSTRB_int_regslice),
    .axisHBMin_TLAST(axisHBMin_TLAST_int_regslice),
    .axisHBMout_TDATA(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TDATA),
    .axisHBMout_TVALID(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TVALID),
    .axisHBMout_TKEEP(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TKEEP),
    .axisHBMout_TSTRB(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TSTRB),
    .axisHBMout_TLAST(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TLAST)
);

rtl_kernel_wizard_0_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11 grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_start),
    .ap_done(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_done),
    .ap_idle(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_idle),
    .ap_ready(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_ready),
    .axisDDRin_TVALID(axisDDRin_TVALID_int_regslice),
    .axisDDRout_TREADY(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TREADY),
    .axisDDRin_TDATA(axisDDRin_TDATA_int_regslice),
    .axisDDRin_TREADY(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRin_TREADY),
    .axisDDRin_TKEEP(axisDDRin_TKEEP_int_regslice),
    .axisDDRin_TSTRB(axisDDRin_TSTRB_int_regslice),
    .axisDDRin_TLAST(axisDDRin_TLAST_int_regslice),
    .axisDDRout_TDATA(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TDATA),
    .axisDDRout_TVALID(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TVALID),
    .axisDDRout_TKEEP(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TKEEP),
    .axisDDRout_TSTRB(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TSTRB),
    .axisDDRout_TLAST(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TLAST)
);

rtl_kernel_wizard_0_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .Message(Message),
    .PEControl(PEControl),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 256 ))
regslice_both_axisHBMin_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisHBMin_TDATA),
    .vld_in(axisHBMin_TVALID),
    .ack_in(regslice_both_axisHBMin_V_data_V_U_ack_in),
    .data_out(axisHBMin_TDATA_int_regslice),
    .vld_out(axisHBMin_TVALID_int_regslice),
    .ack_out(axisHBMin_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisHBMin_V_data_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 32 ))
regslice_both_axisHBMin_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisHBMin_TKEEP),
    .vld_in(axisHBMin_TVALID),
    .ack_in(regslice_both_axisHBMin_V_keep_V_U_ack_in),
    .data_out(axisHBMin_TKEEP_int_regslice),
    .vld_out(regslice_both_axisHBMin_V_keep_V_U_vld_out),
    .ack_out(axisHBMin_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisHBMin_V_keep_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 32 ))
regslice_both_axisHBMin_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisHBMin_TSTRB),
    .vld_in(axisHBMin_TVALID),
    .ack_in(regslice_both_axisHBMin_V_strb_V_U_ack_in),
    .data_out(axisHBMin_TSTRB_int_regslice),
    .vld_out(regslice_both_axisHBMin_V_strb_V_U_vld_out),
    .ack_out(axisHBMin_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisHBMin_V_strb_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_axisHBMin_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisHBMin_TLAST),
    .vld_in(axisHBMin_TVALID),
    .ack_in(regslice_both_axisHBMin_V_last_V_U_ack_in),
    .data_out(axisHBMin_TLAST_int_regslice),
    .vld_out(regslice_both_axisHBMin_V_last_V_U_vld_out),
    .ack_out(axisHBMin_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisHBMin_V_last_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 512 ))
regslice_both_axisDDRin_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisDDRin_TDATA),
    .vld_in(axisDDRin_TVALID),
    .ack_in(regslice_both_axisDDRin_V_data_V_U_ack_in),
    .data_out(axisDDRin_TDATA_int_regslice),
    .vld_out(axisDDRin_TVALID_int_regslice),
    .ack_out(axisDDRin_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisDDRin_V_data_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 64 ))
regslice_both_axisDDRin_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisDDRin_TKEEP),
    .vld_in(axisDDRin_TVALID),
    .ack_in(regslice_both_axisDDRin_V_keep_V_U_ack_in),
    .data_out(axisDDRin_TKEEP_int_regslice),
    .vld_out(regslice_both_axisDDRin_V_keep_V_U_vld_out),
    .ack_out(axisDDRin_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisDDRin_V_keep_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 64 ))
regslice_both_axisDDRin_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisDDRin_TSTRB),
    .vld_in(axisDDRin_TVALID),
    .ack_in(regslice_both_axisDDRin_V_strb_V_U_ack_in),
    .data_out(axisDDRin_TSTRB_int_regslice),
    .vld_out(regslice_both_axisDDRin_V_strb_V_U_vld_out),
    .ack_out(axisDDRin_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisDDRin_V_strb_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_axisDDRin_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisDDRin_TLAST),
    .vld_in(axisDDRin_TVALID),
    .ack_in(regslice_both_axisDDRin_V_last_V_U_ack_in),
    .data_out(axisDDRin_TLAST_int_regslice),
    .vld_out(regslice_both_axisDDRin_V_last_V_U_vld_out),
    .ack_out(axisDDRin_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisDDRin_V_last_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 256 ))
regslice_both_axisHBMout_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TDATA),
    .vld_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TVALID),
    .ack_in(axisHBMout_TREADY_int_regslice),
    .data_out(axisHBMout_TDATA),
    .vld_out(regslice_both_axisHBMout_V_data_V_U_vld_out),
    .ack_out(axisHBMout_TREADY),
    .apdone_blk(regslice_both_axisHBMout_V_data_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 32 ))
regslice_both_axisHBMout_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TKEEP),
    .vld_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TVALID),
    .ack_in(regslice_both_axisHBMout_V_keep_V_U_ack_in_dummy),
    .data_out(axisHBMout_TKEEP),
    .vld_out(regslice_both_axisHBMout_V_keep_V_U_vld_out),
    .ack_out(axisHBMout_TREADY),
    .apdone_blk(regslice_both_axisHBMout_V_keep_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 32 ))
regslice_both_axisHBMout_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TSTRB),
    .vld_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TVALID),
    .ack_in(regslice_both_axisHBMout_V_strb_V_U_ack_in_dummy),
    .data_out(axisHBMout_TSTRB),
    .vld_out(regslice_both_axisHBMout_V_strb_V_U_vld_out),
    .ack_out(axisHBMout_TREADY),
    .apdone_blk(regslice_both_axisHBMout_V_strb_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_axisHBMout_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TLAST),
    .vld_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TVALID),
    .ack_in(regslice_both_axisHBMout_V_last_V_U_ack_in_dummy),
    .data_out(axisHBMout_TLAST),
    .vld_out(regslice_both_axisHBMout_V_last_V_U_vld_out),
    .ack_out(axisHBMout_TREADY),
    .apdone_blk(regslice_both_axisHBMout_V_last_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 512 ))
regslice_both_axisDDRout_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TDATA),
    .vld_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TVALID),
    .ack_in(axisDDRout_TREADY_int_regslice),
    .data_out(axisDDRout_TDATA),
    .vld_out(regslice_both_axisDDRout_V_data_V_U_vld_out),
    .ack_out(axisDDRout_TREADY),
    .apdone_blk(regslice_both_axisDDRout_V_data_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 64 ))
regslice_both_axisDDRout_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TKEEP),
    .vld_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TVALID),
    .ack_in(regslice_both_axisDDRout_V_keep_V_U_ack_in_dummy),
    .data_out(axisDDRout_TKEEP),
    .vld_out(regslice_both_axisDDRout_V_keep_V_U_vld_out),
    .ack_out(axisDDRout_TREADY),
    .apdone_blk(regslice_both_axisDDRout_V_keep_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 64 ))
regslice_both_axisDDRout_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TSTRB),
    .vld_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TVALID),
    .ack_in(regslice_both_axisDDRout_V_strb_V_U_ack_in_dummy),
    .data_out(axisDDRout_TSTRB),
    .vld_out(regslice_both_axisDDRout_V_strb_V_U_vld_out),
    .ack_out(axisDDRout_TREADY),
    .apdone_blk(regslice_both_axisDDRout_V_strb_V_U_apdone_blk)
);

rtl_kernel_wizard_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_axisDDRout_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TLAST),
    .vld_in(grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TVALID),
    .ack_in(regslice_both_axisDDRout_V_last_V_U_ack_in_dummy),
    .data_out(axisDDRout_TLAST),
    .vld_out(regslice_both_axisDDRout_V_last_V_U_vld_out),
    .ack_out(axisDDRout_TREADY),
    .apdone_blk(regslice_both_axisDDRout_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_start_reg <= 1'b1;
        end else if ((grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_ready == 1'b1)) begin
            grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_start_reg <= 1'b1;
        end else if ((grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_ready == 1'b1)) begin
            grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_axisDDRout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_axisHBMout_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_axisDDRout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_axisHBMout_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_axisDDRout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_axisHBMout_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        axisDDRin_TREADY_int_regslice = grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRin_TREADY;
    end else begin
        axisDDRin_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axisHBMin_TREADY_int_regslice = grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMin_TREADY;
    end else begin
        axisHBMin_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((regslice_both_axisDDRout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_axisHBMout_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state7 = ((regslice_both_axisDDRout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_axisHBMout_V_data_V_U_apdone_blk == 1'b1));
end

assign axisDDRin_TREADY = regslice_both_axisDDRin_V_data_V_U_ack_in;

assign axisDDRout_TVALID = regslice_both_axisDDRout_V_data_V_U_vld_out;

assign axisDDRout_TVALID_int_regslice = grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TVALID;

assign axisHBMin_TREADY = regslice_both_axisHBMin_V_data_V_U_ack_in;

assign axisHBMout_TVALID = regslice_both_axisHBMout_V_data_V_U_vld_out;

assign axisHBMout_TVALID_int_regslice = grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TVALID;

assign grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_start = grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_ap_start_reg;

assign grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_11_fu_94_axisDDRout_TREADY = (axisDDRout_TREADY_int_regslice & ap_CS_fsm_state6);

assign grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_start = grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_ap_start_reg;

assign grp_rtl_kernel_wizard_0_Pipeline_VITIS_LOOP_96_1_fu_74_axisHBMout_TREADY = (axisHBMout_TREADY_int_regslice & ap_CS_fsm_state3);

endmodule //rtl_kernel_wizard_0
